name: iac Workload Identity CI

on:
  workflow_call:
    inputs:
      wif_service_account:
        description: 'WIF service account name'
        required: true
        type: string
      project:
        description: 'The project Name of the WIF credentials to auth against GCP'
        required: true
        type: string
      tf_version:
        description: 'Version of Terraform to install'
        type: string
        default: 1.7.5
        required: false
      tf_directory:
        description: 'Directory in which terraform commands should be executed'
        type: string
        default: "."
        required: false
      repository:
        required: false
        type: string
        default: ${{ github.repository }}
      tf_tfvars:
        description: 'Environment specific tfvars file'
        required: false
        type: string
        default: "terraform.tfvars"
      tf_backend_bucket:
        required: false
        type: string
        default: ''
      tf_backend_prefix:
        required: false
        type: string
        default: ''
      tf_apply:
        description: 'The flag whether to run Terraform apply'
        required: false
        type: boolean
        default: false
      extra_parameters:
        description: 'Extra parameters that can be added to both - tf plan and apply'
        type: string
        required: false
        default: ''
      region:
        description: 'Location of the Workload Identity pool used for authentication to GCP. Allowed values: us or aus'
        required: false
        type: string
        default: 'us'

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'

    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GH_AUTOMATION_TOKEN || secrets.GITHUB_TOKEN }}

      # Authenticate to AWS
      - name: Authenticate to AWS
        id: auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      # Terraform install
      - name: Setup Terraform
        id: inst
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '${{ inputs.tf_version }}'
          terraform_wrapper: false

      # Terraform Validate
      - name: Terraform Validate
        id: validate
        run: 'terraform -chdir=${{ inputs.tf_directory }} validate'

      # Terraform Init
      - name: Terraform Validate
        id: init
        run: 'terraform init'
        
      # Terraform Plan
      - name: Plan Terraform
        id: plan
        run: |
          set -o pipefail
          terraform -chdir=${{ inputs.tf_directory }} plan -no-color -input=false -out=tfplan.binary --var-file=${{ inputs.tf_tfvars }} ${{ inputs.extra_parameters}} 2>&1 | tee plan.log

      # Terraform Apply
      - name: Apply Terraform
        id: apply
        if: (( github.ref == 'refs/heads/main' || github.ref == 'main' ) &&  github.event.pull_request.merged == true )
        run: |
          set -o pipefail
          terraform -chdir=${{ inputs.tf_directory }} apply -auto-approve -no-color -input=false --var-file=${{ inputs.tf_tfvars }} ${{ inputs.extra_parameters}} 2>&1 | tee apply.log